#######################################################################
# Setup shared environment variables
#######################################################################
# Compute the triple as used by GCC to install headers and libraries.

# `make` as available by default on redhat does not handle properly
# `!=`, so we use a subshell expansion and immediate variable
# assignement.
TRIPLE := $$(${CC} -v 2>&1 | grep "^Target:" | cut -d ' ' -f 2 | \
		awk -F- '{print $$1,$$(NF-1),$$NF}' | tr ' ' '-')

_CPPFLAGS := ${CPPFLAGS} -isystem /usr/include/${TRIPLE}
_CFLAGS := ${CFLAGS} ${_CPPFLAGS}

_CXXFLAGS := ${CXXFLAGS} -nostdinc++ \
	-isysroot ${INSTALL_DIR} \
	-isystem ${INSTALL_DIR}/include/c++/v1 \
	-isystem /usr/include/${TRIPLE}

_LDFLAGS := ${LDFLAGS} -stdlib=libc++ \
	-L${INSTALL_DIR}/lib \
	-Wl,-rpath,${INSTALL_DIR}/lib

COMMON_ENV := \
	PATH=${INSTALL_DIR}/bin:${PATH} \
	CC=${INSTALL_DIR}/bin/clang \
	CXX=${INSTALL_DIR}/bin/clang++ \
	CPP=${INSTALL_DIR}/bin/clang\ -E \
	CFLAGS="${_CFLAGS}" \
	CPPFLAGS="${_CPPFLAGS}" \
	CXXFLAGS="${_CXXFLAGS}" \
	LDFLAGS="${_LDFLAGS}"

# LLVM Bootstrapping
LLVM_BUILD_STAGE0 := ${BUILD_DIR}/llvm-stage0
LLVM_BUILD_STAGE1 := ${BUILD_DIR}/llvm-stage1
LLVM_BUILD_STAGE2 := ${BUILD_DIR}/llvm-stage2

LLVM_INSTALL_STAGE0 := ${INSTALL_DIR}
LLVM_INSTALL_STAGE1 := ${INSTALL_DIR}
LLVM_INSTALL_STAGE2 := ${INSTALL_DIR}

# We use export as we want to make sure the following goes to subshells auto-
# matically, which does not seem to happen properly just through the CMAKE
# settings. This is only used as part of the final build of LLVM.
LLVM_ENV := \
	export CC="${LLVM_INSTALL_STAGE1}/bin/clang"; \
	export CPP="${LLVM_INSTALL_STAGE1}/bin/clang -E"; \
	export CXX="${LLVM_INSTALL_STAGE1}/bin/clang++"; \
	export CFLAGS="-isystem /usr/include/${TRIPLE}"; \
	export CXXFLAGS="-isystem /usr/include/${TRIPLE}"; \
	export LDFLAGS="-L /usr/lib/${TRIPLE}";

# Flags shared between all stages
LLVM_CMAKE_COMMON := \
	-DBUILD_SHARED_LIBS=ON \
	-DC_INCLUDE_DIRS=/usr/include/${TRIPLE}:/usr/include \
	-DCMAKE_INSTALL_PREFIX=${INSTALL_DIR} \
	-DLLVM_DEFAULT_TARGET_TRIPLE=${TRIPLE} \
	-DLLVM_REQUIRES_RTTI=ON \
	-DLLVM_TOOL_LLDB_BUILD=OFF

# Flags shared between stage 0 & 1
LLVM_CMAKE_COMMON_0_1 := \
	-DCMAKE_BUILD_TYPE=Release \
	-DLLVM_ENABLE_ASSERTIONS=OFF \
	-DLLVM_TARGETS_TO_BUILD=host \
	-DLLVM_TOOL_LLD_BUILD=OFF

# Flags shared between stage 1 & 2
LLVM_CMAKE_COMMON_1_2 := \
	-DLIBCXX_ENABLE_ABI_LINKER_SCRIPT=OFF \
	-DLIBCXX_ENABLE_STATIC_ABI_LIBRARY=ON \
	-DLIBCXXABI_ENABLE_SHARED=OFF

LLVM_CMAKE_STAGE0 := \
	${LLVM_CMAKE_COMMON} \
	${LLVM_CMAKE_COMMON_0_1} \
	-DLLVM_TOOL_COMPILER_RT_BUILD=OFF \
	-DLLVM_TOOL_LIBCXX_BUILD=OFF \
	-DLLVM_TOOL_LIBCXXABI_BUILD=OFF

LLVM_CMAKE_STAGE1 := \
	${LLVM_CMAKE_COMMON} \
	${LLVM_CMAKE_COMMON_0_1} \
	${LLVM_CMAKE_COMMON_1_2}

# LLVM_ENABLE_EH: required for throwing exceptions
# LLVM_ENABLE_RTTI: required for dynamic_cast
LLVM_CMAKE_STAGE2 := \
	${LLVM_CMAKE_COMMON} \
	${LLVM_CMAKE_COMMON_1_2} \
	-DCMAKE_BUILD_TYPE=RelWithDebInfo \
	-DLLVM_ENABLE_ASSERTIONS=ON \
	-DLLVM_ENABLE_EH=ON \
	-DLLVM_ENABLE_LIBCXX=ON \
	-DLLVM_ENABLE_LIBCXXABI=ON \
	-DLLVM_ENABLE_PIC=ON \
	-DLLVM_ENABLE_RTTI=ON \
	-DLLVM_TARGETS_TO_BUILD="host;NVPTX" \
	-DLLVM_USE_INTEL_JITEVENTS:BOOL=ON

#######################################################################
# top-level targets, checks if a call to make is required before
# calling it.
#######################################################################
.PHONY: llvm
llvm: .llvm.install_done

#######################################################################
# Install targets
#######################################################################
do-install-llvm: .llvm.build_done
	[ -d ${LLVM_INSTALL_STAGE2} ] || mkdir -p ${LLVM_INSTALL_STAGE2}
	( \
		unset CFLAGS CXXFLAGS CPPFLAGS LDFLAGS LD_LIBRARY_PATH DYLD_LIBRARY_PATH; \
		eval ${LLVM_ENV} \
		cd ${LLVM_BUILD_STAGE2}; \
		make -j ${JOBS} install; \
	)

#######################################################################
# Build targets
#######################################################################
do-build-llvm: .llvm.configure_done
	( \
		unset CFLAGS CXXFLAGS CPPFLAGS LDFLAGS LD_LIBRARY_PATH DYLD_LIBRARY_PATH; \
		eval ${LLVM_ENV} \
		cd ${LLVM_BUILD_STAGE2}; \
		make -j ${JOBS}; \
	)

#######################################################################
# Configure targets
#######################################################################
do-conf-llvm: .llvm.bootstrap_stage1_done
	# We use clang stage1 to ensure libc++-based LLVM libraries
	( \
		[ -d ${LLVM_BUILD_STAGE2} ] || mkdir -p ${LLVM_BUILD_STAGE2}; \
		unset CFLAGS CXXFLAGS CPPFLAGS LDFLAGS LD_LIBRARY_PATH DYLD_LIBRARY_PATH; \
		eval ${LLVM_ENV} \
		cd ${LLVM_BUILD_STAGE2}; \
		${CMAKE} ${BSD_DIR}/llvm ${LLVM_CMAKE_STAGE2}; \
	)

#######################################################################
# Bootstrap LLVM so that it links itself against libc++
#######################################################################
.llvm.bootstrap_stage1_done: .llvm.bootstrap_stage0_done
	# Either we had clang, thus skipped stage0, or we built it
	# ourselves.
	( \
		[ -d ${LLVM_BUILD_STAGE1} ] || mkdir -p ${LLVM_BUILD_STAGE1}; \
		unset CFLAGS CXXFLAGS CPPFLAGS LDFLAGS LD_LIBRARY_PATH DYLD_LIBRARY_PATH; \
		if ${CXX} --version | grep -q clang; then \
			export CC="${CC}" CPP="${CPP}" CXX="${CXX}"; \
		else \
			export CC="${LLVM_INSTALL_STAGE0}/bin/clang"; \
			export CPP="${LLVM_INSTALL_STAGE0}/bin/clang -E"; \
			export CXX="${LLVM_INSTALL_STAGE0}/bin/clang++"; \
		fi; \
		cd ${LLVM_BUILD_STAGE1}; \
		${CMAKE} ${BSD_DIR}/llvm ${LLVM_CMAKE_STAGE1}; \
		make -j ${JOBS} install \
	)
	touch .llvm.bootstrap_stage1_done

.llvm.bootstrap_stage0_done: .llvm.checkout_done
	# In case we do not have any clang around
	${CXX} --version | grep -q clang || ( \
		[ -d ${LLVM_BUILD_STAGE0} ] || mkdir -p ${LLVM_BUILD_STAGE0}; \
		unset CFLAGS CXXFLAGS CPPFLAGS LDFLAGS LD_LIBRARY_PATH DYLD_LIBRARY_PATH; \
		export CC="${CC}" CPP="${CPP}" CXX="${CXX}"; \
		cd ${LLVM_BUILD_STAGE0}; \
		${CMAKE} ${BSD_DIR}/llvm ${LLVM_CMAKE_STAGE0}; \
		make -j ${JOBS} install \
	)
	touch .llvm.bootstrap_stage0_done

#######################################################################
# Checkout sources as needed
#######################################################################
# This reduces the on-disk storage, and speeds up the clones, but is not
# yet well supported by all git version. So use only for white-listedcw
# revisions of GIT.
SHALLOW_LLVM_SUBMODULES:= \
$$(case $$(git --version) in \
	2.17.1) echo "--depth=1";; \
	*) echo "";; \
esac)

.PRECIOUS: ${BSD_DIR}/clang
.PRECIOUS: ${BSD_DIR}/compiler-rt
.PRECIOUS: ${BSD_DIR}/libcxx
.PRECIOUS: ${BSD_DIR}/libcxxabi
.PRECIOUS: ${BSD_DIR}/libunwind
.PRECIOUS: ${BSD_DIR}/llvm

do-checkout-llvm:
	# No way of adding from a top level submodules within sub-
	# modules, so stickying to this method.
	git submodule update ${SHALLOW_LLVM_SUBMODULES} --init --recursive \
		${BSD_DIR}/llvm \
		${BSD_DIR}/clang \
		${BSD_DIR}/compiler-rt \
		${BSD_DIR}/libcxx \
		${BSD_DIR}/libcxxabi \
		${BSD_DIR}/libunwind \
		${BSD_DIR}/clang-tools-extra
	ln -sf ../../clang ${BSD_DIR}/llvm/tools/clang
	ln -sf ../../compiler-rt ${BSD_DIR}/llvm/projects/compiler-rt
	ln -sf ../../libcxx ${BSD_DIR}/llvm/projects/libcxx
	ln -sf ../../libcxxabi ${BSD_DIR}/llvm/projects/libcxxabi
	ln -sf ../../libunwind ${BSD_DIR}/llvm/projects/libunwind
	[ -d ${BSD_DIR}/llvm/tools/clang/tools ] || mkdir -p ${BSD_DIR}/llvm/tools/clang/tools
	ln -sf ../../clang-tools-extra ${BSD_DIR}/llvm/tools/clang/tools/extra
	# Optional.h from LLVM 7.0 had some transformations that seem to confuse
	# GCC, causing problems linking gcc-generated LLVM libraries to
	# clang-generated code.
	cd ${BSD_DIR}/llvm && git apply ${PROJECT_DIR}/patches/0001-llvm-optional.h.patch
	# BasicBlock.h header contains ">>>" which is causing problems when
	# compiling for CUDA, as it confuses clang to believe it is part of
	# a kernel launch.
	cd ${BSD_DIR}/llvm && git apply ${PROJECT_DIR}/patches/0002-llvm.patch
	# Import from https://github.com/rsmmr/install-clang, the clang
	# patch which fixes some linking issues. Otherwise libstdc++
	# keeps getting pulled in.
	cd ${BSD_DIR}/clang && git apply ${PROJECT_DIR}/patches/0003-tools--clang--linker-args.patch

#######################################################################
# Clean targets
#######################################################################

#######################################################################
# Makefile utils / Generic targets
#######################################################################
ifeq (${VERBOSE},0)
# Do not echo the commands before executing them.
.SILENT:
endif

.PHONY: help
help:
	@echo "-----------------------------------------------------------------------"
	@echo "The general commands are available:"
	@echo " * show-config		Display configuration variables such as paths,"
	@echo " 			number of jobs and other tunable options."
	@echo " * clean 		Remove trireme object files and binaries."
	@echo " * dist-clean		Cleans the repository to a pristine state,"
	@echo " 			just like after a new clone of the sources."
	@echo "-----------------------------------------------------------------------"
	@echo " In the following targets, '%' can be replaced by one of the external"
	@echo " project among the following list:"
	@echo ""
	@echo "  ${PROJECTS}"
	@echo ""
	@echo " * dist-clean-%		Removes everything from project '%', forcing a"
	@echo " 			build from scratch of '%'."
	@echo " * clean-%		Removes the object files of '%'"
	@echo " * install-%		Install '%' in INSTALL_DIR"
	@echo " * build-%		Build '%' in BUILD_DIR"
	@echo " * configure-%		Configure '%'"
	@echo " * checkout-%		Checkout the sources of '%'"
	@echo "-----------------------------------------------------------------------"

.PHONY: show-config
show-config:
	@echo "-----------------------------------------------------------------------"
	@echo "Configuration:"
	@echo "-----------------------------------------------------------------------"
	@echo "PROJECT_DIR		:= ${PROJECT_DIR}"
	@echo "SRC_DIR			:= ${SRC_DIR}"
	@echo "EXTERNAL_DIR		:= ${EXTERNAL_DIR}"
	@echo "BSD_DIR			:= ${BSD_DIR}"
	@echo "MIT_DIR			:= ${MIT_DIR}"
	@echo "BUILD_DIR		:= ${BUILD_DIR}"
	@echo "INSTALL_DIR		:= ${INSTALL_DIR}"
	@echo "JOBS			:= ${JOBS}"
	@echo "USER			:= ${USER}"
	@echo "VERBOSE			:= ${VERBOSE}"
	@echo "-----------------------------------------------------------------------"

.PHONY: dist-clean
dist-clean:
	@echo "-----------------------------------------------------------------------"
	@echo "-- dist-clean..."
	-rm -rf ${EXTERNAL_DIR}
	-git clean -dxf .
	@echo "-- dist-clean done."

%: .%.install_done

.PHONY: install-%
install-%:
	-rm -f .$$(echo $@ | sed -e 's,install-,,').install_done
	make   .$$(echo $@ | sed -e 's,install-,,').install_done

.PHONY: build-%
build-%:
	-rm -f .$$(echo $@ | sed -e 's,build-,,').build_done
	make   .$$(echo $@ | sed -e 's,build-,,').build_done

.PHONY: configure-%
configure-%:
	-rm -f .$$(echo $@ | sed -e 's,configure-,,').configure_done
	make   .$$(echo $@ | sed -e 's,configure-,,').configure_done

.PHONY: checkout-%
checkout-%:
	-rm -f .$$(echo $@ | sed -e 's,checkout-,,').checkout_done
	make   .$$(echo $@ | sed -e 's,checkout-,,').checkout_done

.PHONY: dist-clean-%
dist-clean-%: clean-%
	@echo "-----------------------------------------------------------------------"
	@echo "-- $$(echo $@ | sed -e 's,^dist-clean-,,') dist-clean..."
	-rm -rf  ${EXTERNAL_DIR}/*/$$(echo $@ | sed -e 's,dist-clean-,,')
	@echo "-- $$(echo $@ | sed -e 's,^dist-clean-,,') dist-clean done."

.PHONY: clean-%
clean-%:
	@echo "-----------------------------------------------------------------------"
	@echo "-- $$(echo $@ | sed -e 's,^clean-,,') clean..."
	-rm .$$(echo $@ | sed -e 's,clean-,,').*_done
	-rm -rf  ${BUILD_DIR}/$$(echo $@ | sed -e 's,clean-,,')
	@echo "-- $$(echo $@ | sed -e 's,^clean-,,') clean done."

.PHONY: do-install-%
do-install-%: .%.build_done
	[ -d ${INSTALL_DIR} ] || mkdir -p ${INSTALL_DIR}
	cd ${BUILD_DIR}/$$(echo $@ | sed -e 's,do-install-,,') && \
		${COMMON_ENV} make -j ${JOBS} install

.PHONY: do-build-%
do-build-%: .%.configure_done
	[ -d ${BUILD_DIR} ] || mkdir -p ${BUILD_DIR}
	cd ${BUILD_DIR}/$$(echo $@ | sed -e 's,do-build-,,') && \
		${COMMON_ENV} make -j ${JOBS}

.PHONY: do-conf-%

.PHONY: do-checkout-%
do-checkout-%:
	git submodule update ${SHALLOW_LLVM_SUBMODULES} --init --recursive \
		$$(git submodule status | grep $$(echo $@ | sed -e 's,do-checkout-,,') | cut -d ' ' -f 3)

.PRECIOUS: .%.install_done
.%.install_done: .%.build_done
	@echo "-----------------------------------------------------------------------"
	@echo "-- $$(echo $@ | sed -e 's,^[.],,' -e 's,_done,,')..."
	make do-install-$$(echo $@ | sed -e 's,^[.],,' -e 's,.install_done,,')
	@echo "-- $$(echo $@ | sed -e 's,^[.],,' -e 's,_done,,') done."
	touch $@

.PRECIOUS: .%.build_done
.%.build_done: .%.configure_done
	@echo "-----------------------------------------------------------------------"
	@echo "-- $$(echo $@ | sed -e 's,^[.],,' -e 's,_done,,')..."
	make do-build-$$(echo $@ | sed -e 's,^[.],,' -e 's,.build_done,,')
	@echo "-- $$(echo $@ | sed -e 's,^[.],,' -e 's,_done,,') done."
	touch $@

.PRECIOUS: .%.configure_done
.%.configure_done: .%.checkout_done
	@echo "-----------------------------------------------------------------------"
	@echo "-- $$(echo $@ | sed -e 's,^[.],,' -e 's,_done,,')..."
	make do-conf-$$(echo $@ | sed -e 's,^[.],,' -e 's,.configure_done,,')
	@echo "-- $$(echo $@ | sed -e 's,^[.],,' -e 's,_done,,') done."
	touch $@

.PRECIOUS: .%.checkout_done
.%.checkout_done:
	@echo "-----------------------------------------------------------------------"
	@echo "-- $$(echo $@ | sed -e 's,^[.],,' -e 's,_done,,')..."
	make do-checkout-$$(echo $@ | sed -e 's,^[.],,' -e 's,.checkout_done,,')
	@echo "-- $$(echo $@ | sed -e 's,^[.],,' -e 's,_done,,') done."
	touch $@
